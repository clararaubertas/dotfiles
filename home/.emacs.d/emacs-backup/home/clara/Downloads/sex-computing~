Computer SEX

Contrary to popular belief, computers have SEX, too. Here is a small sample of
computer SEX stories to convince you. (Feel free to skip any section if you get
too bored. You're probably just reading this on the toilet anyway. I won't hold
it against you.)

Byte sex

When you write 123, the 1 means 100, the 2 means 20 and the 3 just means 3. So
you start off with the most significant part and end with the least. Call this
sensible order "big-endian". If you wanted, you could also write the same
number as "321", beginning with the least and ending with the most significant
part. Let's call that kinky practice "little-endian".

Computer engineers are faced with many complex life decisions every day, like
regular or extra crispy, for here or to go, paper or plastic? One such decision
is whether to use big- or little-endian when storing the parts of a number in a
computer memory. Instead of a digit with ten possible values, each part is
generally a byte with 256 possible values. So the byte order or "byte sex" of a
computer is whether it stores 123 as "123" or "321". In either case it's the
same number, just written as God intended or in a sinfully deviant way.

Historically computers used big-endian. The little-endian byte sex came into
popularity in the 1970s along with disco and lava lamps. Predictably, the
problem started in Texas.

One day, two obscure Texan professors fell through a time warp to 1969 and
decided to build a personal computer before its time. They contracted with two
startup companies called Texas Instruments and Intel to build a processor chip
for the computer. This was impossibly hard and neither company finished in
time, so the crazy professors wired up their own processor out of hundreds of
individual chips at enormous cost.

Since random-access memory was hard to come by, the profs made a memory where
bits cycled around in a very fast conga line. Instead of accessing just any
bits at random, to get at a number, their computer had to wait for its bits to
shift one by one through the front of the conga line.

To be fair, they actually had several conga lines going in parallel, so could
get at several numbers at once---but only one bit at a time. So suppose that
you are adding up two numbers, taking one bit from each at a time. You want to
start from the least significant place and work your way up, carrying at each
step. Hence it made sense to store numbers in little-endian order so they could
always carry right away (try adding backwards, it's hard).

In any event, the profs' conga line computer is now long forgotten. But Intel
eventually did finish the processor design commissioned for it, and started
selling their 8008 chips for a modest profit. Its descendents became the very
popular x86 line of little-endian CPUs used in the IBM PC and compatibles,
which made little-endianness the norm.

Nowadays most computers are either little-endian or can pretend to be. But
since the Internet was designed in a bygone era of computing, its protocols all
use big-endian numbers. As a result it's easy for modern networked programs to
get bitten by byte sex and get numbers backwards. This happens all the time and
is an extremely annoying and stupid melborp.

Sign EXtend (Motorola 6809, others)

As a rule, computer processors can only do very simple primitive operations
like adding two numbers. Computer engineers give each operation a catchy name
like "ADD" so that celebrities can discuss it at cocktail parties. One
operation in computer arithmetic is "sign extension", and so several processors
have an instruction for that called "SEX".

Mullet-sporting '80s programmers could doubtless be overheard giggling as they
surreptitiously typed SEX instructions into their work computers. Sadly modern
programmers generally work at a higher level of abstraction and don't get to
think about things like SEX very much.

Computers use the same circuits to add and subtract. Notice how when you add 9
to a single digit, the ones digit of the result is one less, so if you just
look at that you've effectively subtracted one. If you let 999 represent -1,
this will work for three digit numbers, too. In general a+(10^n-b) = a-b+10^n,
so disregarding the 10^n part you get a-b.

The need for SEX arises when you're adding numbers of different lengths. If you
add 200 + 2, that's the same as 200 + 002. But to add 200 + -1, you really need
to add 200 + 999. If the -1 is just represented as 9, it won't work. SEX
effectively pads out the front of a number with extra 9s if it's supposed to be
negative and 0s if it's not (it's fine to SEX positive numbers).

SEt X (RCA 1802)

One old processor, the 1802, had a really unusual kind of SEX.

I first learned about the 1802 in a field in Holland when a crazy-looking dude
told me about the first computer he built with one. I thought he might possibly
be confused or high, because the technology sounded years ahead of 1976 when he
claimed he built his computer. But I checked later, and it really existed.

Generally, processors take data from memory, do operations to it, and store it
back into memory. To facilitate this, they have to keep track of some stuff,
like what instruction to do next or some intermediate answers. They keep this
stuff in registers, a small, fast short-term memory.

Processors organize their registers in roughly two ways. Either all the
registers have specific roles and are tied to specific functions, or a few have
specific roles and the rest are in a general pool. Early computers were mostly
hardwired. The 1802 weirdly let any of its 16 registers do anything.

For instance, all processors have a register that tracks the current program
position. In the 1802, the SEP instruction could make any register act as the
current program position. So you could have say four different active program
positions cycling off between each other. Crazy town! 1802's SEX was
comparatively dull, just controlling which register would act as "X", a base
for memory addresses.

Ignoring its SEX appeal, the 1802 was a pretty crappy CPU. But it was the least
bad choice for the Galileo planetary probe, which included 19 1802s as part of
its complicated on-board computer system. By December, 1995 when it reached
Jupiter, Galileo had pulled off millions of successful SEX operations in space.

Conclusion

In truth, that's about all I unconvered in my extensive computer SEX research.
A couple of observant hackers have noted that the Intel 8051, which has no SEX,
nevertheless has ANL and ORL. And the Motorola 6809 which does have SEX also
has an STD.

(Credits: The Google, the wikipedia, the jargon file.)
